name: 🔍 CI

on:
  workflow_dispatch:
  push:
    branches: [main, develop]
  pull_request:
    types: [opened, synchronize, reopened]

env:
  # Customize these environment variables for your project
  NODE_VERSION: '20'
  PYTHON_VERSION: '3.11'
  GO_VERSION: '1.21'
  RUST_VERSION: 'stable'

jobs:
  # Job for Node.js/TypeScript projects
  nodejs:
    name: 🟢 Node.js CI
    runs-on: ubuntu-latest
    if: hashFiles('package.json') != ''
    
    strategy:
      matrix:
        node-version: [18, 20, 22]
      
    steps:
      - name: ⬇️ Checkout repository
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🔍 Type checking
        run: npm run typecheck
        continue-on-error: true

      - name: 🧹 Lint code
        run: npm run lint

      - name: 🎨 Check formatting
        run: npm run format:check
        continue-on-error: true

      - name: 🧪 Run tests
        run: npm test

      - name: 🏗️ Build project
        run: npm run build

  # Job for Deno projects
  deno:
    name: 🦕 Deno CI
    runs-on: ubuntu-latest
    if: hashFiles('deno.json') != '' || hashFiles('deno.jsonc') != ''
    
    steps:
      - name: ⬇️ Checkout repository
        uses: actions/checkout@v4

      - name: 📦 Setup Deno
        uses: denoland/setup-deno@v2
        with:
          deno-version: v1.x

      - name: 🧹 Lint and format
        run: |
          deno lint
          deno fmt --check

      - name: 🔍 Type checking
        run: deno check **/*.ts

      - name: 🧪 Run tests
        run: deno test --allow-all

  # Job for Python projects
  python:
    name: 🐍 Python CI
    runs-on: ubuntu-latest
    if: hashFiles('requirements.txt') != '' || hashFiles('pyproject.toml') != '' || hashFiles('setup.py') != ''
    
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12']
      
    steps:
      - name: ⬇️ Checkout repository
        uses: actions/checkout@v4

      - name: 📦 Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: 📥 Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi

      - name: 🧹 Lint with flake8
        run: |
          pip install flake8
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: 🎨 Format check with black
        run: |
          pip install black
          black --check .

      - name: 🧪 Run tests with pytest
        run: |
          pip install pytest pytest-cov
          pytest --cov=./ --cov-report=xml

  # Job for Go projects
  go:
    name: 🐹 Go CI
    runs-on: ubuntu-latest
    if: hashFiles('go.mod') != ''
    
    strategy:
      matrix:
        go-version: ['1.20', '1.21', '1.22']
      
    steps:
      - name: ⬇️ Checkout repository
        uses: actions/checkout@v4

      - name: 📦 Setup Go ${{ matrix.go-version }}
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go-version }}

      - name: 📥 Download dependencies
        run: go mod download

      - name: 🧹 Lint
        run: |
          go vet ./...
          go fmt ./...

      - name: 🧪 Run tests
        run: go test -v ./...

      - name: 🏗️ Build
        run: go build -v ./...

  # Job for Rust projects
  rust:
    name: 🦀 Rust CI
    runs-on: ubuntu-latest
    if: hashFiles('Cargo.toml') != ''
    
    steps:
      - name: ⬇️ Checkout repository
        uses: actions/checkout@v4

      - name: 📦 Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: 📥 Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: 🧹 Format check
        run: cargo fmt --all -- --check

      - name: 🔍 Clippy
        run: cargo clippy -- -D warnings

      - name: 🧪 Run tests
        run: cargo test

      - name: 🏗️ Build
        run: cargo build --verbose

  # Generic job for other projects or when specific detection fails
  generic:
    name: 🔧 Generic CI
    runs-on: ubuntu-latest
    if: hashFiles('package.json') == '' && hashFiles('deno.json') == '' && hashFiles('requirements.txt') == '' && hashFiles('go.mod') == '' && hashFiles('Cargo.toml') == ''
    
    steps:
      - name: ⬇️ Checkout repository
        uses: actions/checkout@v4

      - name: 🔍 Project structure analysis
        run: |
          echo "📊 Project structure:"
          find . -maxdepth 2 -type f -name "*.json" -o -name "*.toml" -o -name "*.yaml" -o -name "*.yml" | head -10
          echo "📝 Available scripts:"
          if [ -f "Makefile" ]; then echo "Found Makefile"; fi
          if [ -f "justfile" ]; then echo "Found justfile"; fi
          if [ -f "scripts/" ]; then echo "Found scripts directory"; fi

      - name: 🧪 Run available tests
        run: |
          if [ -f "Makefile" ]; then
            make test || echo "Make test failed or not available"
          elif [ -f "justfile" ]; then
            just test || echo "Just test failed or not available"
          elif [ -f "test.sh" ]; then
            ./test.sh || echo "Test script failed"
          else
            echo "No standard test command found"
          fi

  # Summary job that depends on all other jobs
  ci-summary:
    name: ✅ CI Summary
    runs-on: ubuntu-latest
    needs: [nodejs, deno, python, go, rust, generic]
    if: always()
    
    steps:
      - name: 🎉 CI completed successfully
        if: ${{ !contains(needs.*.result, 'failure') && !contains(needs.*.result, 'cancelled') }}
        run: echo "✅ All CI checks passed!"
        
      - name: 🚨 CI failed
        if: ${{ contains(needs.*.result, 'failure') }}
        run: |
          echo "❌ Some CI checks failed. Please review the logs above."
          exit 1
