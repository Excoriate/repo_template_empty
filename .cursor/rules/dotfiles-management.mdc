---
description: "Detect repository stack and update gitignore patterns accordingly"
globs: [".gitignore"]
alwaysApply: true
---

# Stack-Aware Gitignore Management

## Description

Automatically update `.gitignore` patterns based on detected repository technology stack. Add stack-specific exclusions only when corresponding technology files are present.

## Rule

Execute stack detection and update `.gitignore` patterns:

1. **Detect Stack**: Scan for `package.json`, `go.mod`, `Cargo.toml`, `requirements.txt`, `Dockerfile`
2. **Add Patterns**: Include technology-specific patterns only for detected technologies
3. **Preserve Security**: Always include universal security exclusions (`.env*`, `*.key`, `*.pem`)
4. **Avoid Bloat**: Do not add patterns for technologies not present in repository

### Stack Detection Commands

```bash
# Node.js detection
[ -f package.json ] && add_patterns="node_modules/ dist/ .npm npm-debug.log*"

# Python detection
[ -f requirements.txt ] && add_patterns="__pycache__/ *.pyc venv/ .pytest_cache/"

# Go detection
[ -f go.mod ] && add_patterns="vendor/ *.exe *.test go.work"

# Rust detection
[ -f Cargo.toml ] && add_patterns="target/ Cargo.lock"

# Docker detection
[ -f Dockerfile ] && add_patterns="docker-compose.override.yml"
```

## Implementation

**Cursor IDE Integration:**
- Triggers on technology file creation/modification
- Suggests `.gitignore` updates based on detected stack
- Prevents duplicate pattern addition

**Technical Enforcement:**
- Pattern validation before addition
- Duplicate pattern detection
- Alphabetical pattern organization

## Benefits

1. **Minimal Patterns**: Only includes patterns for technologies actually used
2. **Automatic Updates**: Detects new technologies and suggests exclusions
3. **Security First**: Always includes universal security patterns
4. **No Redundancy**: Prevents duplicate or irrelevant patterns

## Examples

### ✅ Correct Stack Detection

**Node.js Project:**
```bash
# Detected: package.json exists
# Add to .gitignore:
node_modules/
dist/
.npm
npm-debug.log*
```

**Go Project:**
```bash
# Detected: go.mod exists
# Add to .gitignore:
vendor/
*.exe
*.test
go.work
```

### ❌ Incorrect Pattern Addition

```bash
# ❌ Adding Python patterns to Node.js-only project
__pycache__/  # Technology not detected

# ❌ Adding all patterns regardless of stack
node_modules/  # In Go-only project
target/        # In Node.js-only project
```
