---
description: "Enforce comprehensive standards for creating high-quality cursor rules in MDC format with proper YAML frontmatter, structured content sections, file organization, and production-ready implementation guidance."
globs: ["**/*.mdc", ".cursor/rules/**"]
alwaysApply: true
---

# Cursor Rule Creation Standards

## Description

This rule enforces comprehensive standards for creating production-ready cursor rules that follow MDC (Model-Driven Code) format specifications. It ensures consistency, completeness, and technical precision in cursor rule development, covering YAML frontmatter structure, content organization, file management, and quality validation.

## Rule

1. **MDC Format Compliance**: Create all cursor rules using proper MDC format structure:
   - Valid YAML frontmatter with required fields: `description`, `globs`, `alwaysApply`
   - Proper markdown content structure with hierarchical headers
   - Correct syntax validation for both YAML and markdown components

2. **File Organization Standards**:
   - Create all cursor rule files in `.cursor/rules/` directory
   - Use kebab-case naming convention: `[rule-name].mdc`
   - Validate file path accessibility and directory structure existence

3. **YAML Frontmatter Requirements**:
   - `description`: Concise, actionable explanation of rule purpose (1-2 sentences)
   - `globs`: Proper glob patterns for file targeting (use `[""]` for global rules)
   - `alwaysApply`: Boolean indicating global application scope
   - Maintain proper YAML syntax with appropriate data types

4. **Content Structure Mandates**: Include all required sections in order:
   - **Description**: Clear purpose and scope explanation
   - **Rule**: Numbered, specific, actionable requirements
   - **Implementation**: Technical details about cursor IDE enforcement
   - **Benefits**: Organizational and workflow advantages
   - **Examples**: Correct/incorrect patterns with ASCII diagrams

5. **Language Precision Standards**:
   - Use direct, imperative commands (e.g., "Execute", "Create", "Validate")
   - Eliminate verbose explanations and conditional language
   - Replace vague terms with specific, measurable requirements
   - Employ relative paths only (never absolute paths)

6. **Path Validation Protocol**:
   - Verify all referenced file/directory paths exist in codebase
   - Mark non-existent paths as "creation requirements"
   - Document path corrections in rule content
   - Ensure paths are relative to project root

7. **Quality Assurance Requirements**:
   - Validate YAML frontmatter syntax before file creation
   - Check markdown formatting compliance
   - Ensure content completeness across all mandatory sections
   - Verify ASCII diagrams render correctly

8. **Process Integration Standards**:
   - Use TodoWrite tool for task management and progress tracking
   - Implement phase-by-phase execution with verification gates
   - Create physical files using edit tools (not terminal display only)
   - Complete all checklist items before rule finalization

## Implementation

**Cursor IDE Integration:**
- Global application (`alwaysApply: true`) ensures continuous enforcement during cursor rule creation
- File pattern matching targets `.mdc` files and `.cursor/rules/` directory
- Real-time syntax validation for YAML frontmatter and markdown content
- Contextual suggestions based on MDC format requirements

**AI Behavior Guidance:**
- Enforces systematic approach to rule creation with mandatory sections
- Prevents incomplete or malformed cursor rule generation
- Validates content quality against production standards
- Ensures consistent file organization across projects

**Technical Enforcement:**
- YAML syntax validation using proper parsing libraries
- Markdown linting for structural compliance
- File system operations validation
- Path existence verification before rule finalization

## Benefits

1. **Consistency**: Maintains uniform cursor rule quality and structure across all projects
2. **Completeness**: Prevents incomplete or malformed cursor rule creation
3. **Professionalism**: Ensures production-ready rule quality matching senior technical writer standards
4. **Maintainability**: Creates self-documenting rules with clear structure and examples
5. **Efficiency**: Reduces rule creation time through systematic approach and validation
6. **Reliability**: Validates all technical requirements before rule deployment

## Examples

### ‚úÖ Correct Implementation

**Properly Structured Cursor Rule:**

```markdown
---
description: "Enforce TypeScript coding standards and best practices"
globs: ["**/*.ts", "**/*.tsx"]
alwaysApply: false
---

# TypeScript Standards Rule

## Description
Enforce comprehensive TypeScript coding standards including type safety, 
naming conventions, and modern ES6+ syntax usage.

## Rule
1. Use strict TypeScript configuration with noImplicitAny enabled
2. Employ PascalCase for interfaces and types
3. Implement proper error handling with typed exceptions

## Implementation
**Technical Enforcement:**
- Integrates with TypeScript compiler for type checking
- Validates naming conventions through AST analysis

## Benefits
1. **Type Safety**: Prevents runtime errors through compile-time checking
2. **Maintainability**: Consistent code structure across team

## Examples
[Correct/Incorrect examples with ASCII diagrams]
```

**File Structure Visualization:**
```
.cursor/
‚îî‚îÄ‚îÄ rules/
    ‚îú‚îÄ‚îÄ typescript-standards.mdc     ‚úÖ Proper naming (kebab-case)
    ‚îú‚îÄ‚îÄ api-validation.mdc           ‚úÖ Descriptive naming
    ‚îî‚îÄ‚îÄ security-headers.mdc         ‚úÖ Clear purpose naming
```

### ‚ùå Incorrect Implementation

**Malformed Cursor Rule:**

```markdown
description: TypeScript rule
globs: *.ts
---

# TypeScript

This rule is about TypeScript...

## Some Requirements
- Maybe use types
- Could be good to check things
```

**Problems Identified:**
```
Issues/
‚îú‚îÄ‚îÄ Invalid YAML frontmatter syntax
‚îú‚îÄ‚îÄ Missing required fields (alwaysApply)
‚îú‚îÄ‚îÄ Incomplete content structure (missing Implementation, Benefits, Examples)
‚îú‚îÄ‚îÄ Vague language ("maybe", "could be")
‚îú‚îÄ‚îÄ No specific, actionable requirements
‚îî‚îÄ‚îÄ Missing file organization in .cursor/rules/
```

### üîß MDC Format Reference

**Complete YAML Frontmatter Example:**
```yaml
---
description: "Brief, actionable description of rule purpose and scope"
globs: ["**/*.ts", "**/*.tsx", "src/**/*.js"]  # Array format for multiple patterns
alwaysApply: true  # Boolean for global application
---
```

**Content Section Template:**
```markdown
# Rule Name

## Description
[Clear purpose and scope explanation]

## Rule
1. [Specific, numbered requirement]
2. [Actionable directive with measurable outcome]
3. [Technical specification with validation criteria]

## Implementation
**Cursor IDE Integration:**
[Technical details about enforcement]

**AI Behavior Guidance:**
[How rule affects AI decision-making]

## Benefits
1. **Advantage**: [Specific benefit explanation]
2. **Improvement**: [Workflow enhancement description]

## Examples
### ‚úÖ Correct Implementation
[Proper examples with code blocks]

### ‚ùå Incorrect Implementation
[Anti-patterns with explanations]

### üîß Visual Diagrams
[ASCII directory structures or process flows]
```

**Directory Organization Requirements:**
```
project/
‚îú‚îÄ‚îÄ .cursor/
‚îÇ   ‚îî‚îÄ‚îÄ rules/              ‚úÖ Required directory structure
‚îÇ       ‚îú‚îÄ‚îÄ rule-name.mdc   ‚úÖ Kebab-case naming
‚îÇ       ‚îî‚îÄ‚îÄ another-rule.mdc ‚úÖ Descriptive naming
‚îî‚îÄ‚îÄ [other project files]
```