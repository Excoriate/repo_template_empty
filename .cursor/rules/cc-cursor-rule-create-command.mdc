---
description: "Comprehensive guidelines for using and executing the cc_cursor_rule_create command, reflecting v1.2.0 enhancements including extended thinking, XML structuring, evidence verification, and systematic rule generation protocols."
globs: ["*.mdc", ".cursor/rules/*", ".claude/commands/*", "**/commands/*"]
alwaysApply: true
---

# CC Cursor Rule Create Command Guidelines

## Description

The `cc_cursor_rule_create` command generates comprehensive, production-ready cursor rules in proper MDC format with complete YAML frontmatter, structured content sections, and practical implementation guidance. This command operates as a systematic single-phase creation process that delivers cursor rule files matching exceptional precision and structural integrity expected from Senior+ technical writers with 7+ years documentation experience.

**Command Version**: 1.2.0 - Enhanced with extended thinking integration, XML structuring framework, evidence verification protocols, and chain-of-thought reasoning validation.

## Rule

When using the `cc_cursor_rule_create` command, you MUST adhere to these directives:

1. **Mandatory Prefix Compliance**: Always begin responses with "**Mr. Alex ü§ñ, (v7.1)**" as specified in the core mandate.

2. **TodoWrite Integration Requirements**: 
   - Create structured todo lists before command execution using the TodoWrite tool
   - Track progress systematically through all 14 mandatory checklist items
   - Mark items as completed only after verification
   - Maintain visual progress indicators throughout execution

3. **Extended Thinking Protocol**:
   - Use `think hard` keyword for complex cursor rule creation (16K+ tokens allocation)
   - Apply systematic problem decomposition with clear logical progression
   - Evaluate minimum 2-3 alternative approaches with pros/cons analysis
   - Include confidence scoring (High: 90-100%, Medium: 70-89%, Low: 50-69%)

4. **File Creation Protocol**:
   - MUST create physical `.mdc` files in `.cursor/rules/` directory using Write tool
   - Follow kebab-case naming convention: `[rule-name].mdc`
   - Validate directory structure exists before file creation
   - Never display content only in terminal - generate actual files

5. **YAML Frontmatter Specifications**:
   - Include `description`, `globs`, and `alwaysApply` fields
   - Use proper glob patterns: `["*.ts", "*.js"]` for multiple patterns, `""` for global
   - Apply appropriate globs based on rule target scope
   - Validate YAML syntax compliance

6. **Content Structure Requirements**:
   - Description: Clear explanation of rule purpose and scope
   - Rule: Numbered, actionable directives with specific requirements
   - Implementation: Technical details about cursor IDE enforcement
   - Benefits: Organizational and workflow advantages
   - Examples: Both correct (‚úÖ) and incorrect (‚ùå) patterns with ASCII diagrams

7. **File/Directory Reference Validation**:
   - Verify all referenced paths exist using Read or LS tools
   - Correct non-existent paths or mark as creation requirements
   - Use relative paths only (e.g., `src/components/` not `/absolute/path/`)
   - Document path corrections in rule content

8. **Rule Conciseness & Completeness**:
   - Ensure rules are self-contained with full context
   - Eliminate verbose explanations while preserving functionality
   - Use direct, imperative language (e.g., "Execute repomix" not "Consider running...")
   - Maintain actionability when piped into other rules

9. **Evidence-Based Reasoning**:
   - Support all technical claims with verifiable evidence
   - Include confidence levels for recommendations
   - Reference specific documentation sources
   - Validate logical consistency throughout rule content

10. **Quality Assurance Gates**:
    - Validate final file format and syntax
    - Confirm all mandatory sections present
    - Verify markdown formatting compliance
    - Check structural integrity against reference standards

## Implementation

The cursor IDE will enforce this rule by:

- **Real-time Validation**: Checking command execution against the 10 mandatory directives
- **Progress Tracking**: Monitoring TodoWrite tool usage and checklist completion
- **File Creation Verification**: Ensuring physical `.mdc` files are generated in correct location
- **Format Compliance**: Validating YAML frontmatter syntax and MDC structure
- **Content Quality**: Comparing output against reference example standards
- **Evidence Verification**: Confirming all technical claims are properly supported

## Benefits

- **Systematic Execution**: TodoWrite integration ensures no steps are missed
- **Production Quality**: V1.2.0 enhancements deliver technical writer-level precision
- **Evidence-Based Output**: Confidence scoring and verification reduce hallucinations
- **Structural Consistency**: XML framework provides clear semantic organization
- **Extended Reasoning**: Think hard protocol allocates sufficient cognitive resources
- **File Validation**: Path verification prevents broken references in cursor rules
- **Self-Contained Rules**: Conciseness requirements ensure standalone functionality
- **Quality Assurance**: Multiple verification gates prevent substandard output

## Examples

### ‚úÖ Correct Command Usage

```bash
# Proper command execution with TodoWrite integration
/cc_cursor_rule_create api-validation "Ensure API calls include validation"

# Expected workflow:
1. Create TodoWrite checklist with 14 items
2. Use extended thinking with confidence scoring
3. Generate physical .mdc file in .cursor/rules/
4. Validate all file references exist
5. Ensure rule is self-contained and concise
```

**Correct YAML Frontmatter**:
```yaml
---
description: "Comprehensive API validation rules for TypeScript/JavaScript files"
globs: ["*.ts", "*.js", "src/api/**/*"]
alwaysApply: true
---
```

**Correct File Structure**:
```
.cursor/
‚îî‚îÄ‚îÄ rules/
    ‚îî‚îÄ‚îÄ api-validation.mdc    ‚úÖ Physical file created
```

### ‚ùå Incorrect Command Usage

```bash
# Missing TodoWrite integration
/cc_cursor_rule_create quick-rule

# Problems:
‚ùå No systematic todo list creation
‚ùå No progress tracking
‚ùå Rushed execution without verification gates
```

**Incorrect Content Display**:
```markdown
# Displaying rule content in terminal only
Description: Some API rule...
Rule: 1. Do something...

‚ùå No physical file created
‚ùå No .cursor/rules/ directory usage
‚ùå Terminal output only is command failure
```

**Incorrect File References**:
```markdown
Rule: Always check the docs in /absolute/path/docs/api/
‚ùå Absolute path used
‚ùå Path existence not validated
‚ùå Not self-contained for piping
```

### Directory Structure Visualization

```
Project Root/
‚îú‚îÄ‚îÄ .cursor/                     ‚úÖ Required directory
‚îÇ   ‚îî‚îÄ‚îÄ rules/                   ‚úÖ Cursor rules location
‚îÇ       ‚îú‚îÄ‚îÄ api-validation.mdc   ‚úÖ Generated rule
‚îÇ       ‚îî‚îÄ‚îÄ cc-cursor-rule-create-command.mdc  ‚úÖ This rule
‚îú‚îÄ‚îÄ .claude/                     ‚ö†Ô∏è  Optional, validate if referenced
‚îÇ   ‚îî‚îÄ‚îÄ commands/                ‚ö†Ô∏è  Command definitions
‚îú‚îÄ‚îÄ src/                         ‚úÖ Common project structure
‚îÇ   ‚îî‚îÄ‚îÄ api/                     ‚úÖ Referenced in globs
‚îî‚îÄ‚îÄ docs/                        ‚úÖ Documentation references
```

**Rule Quality Checklist**:
- ‚úÖ Physical `.mdc` file created
- ‚úÖ TodoWrite integration used
- ‚úÖ Extended thinking applied
- ‚úÖ All file references validated
- ‚úÖ YAML frontmatter compliant
- ‚úÖ Self-contained and concise
- ‚úÖ Evidence-based claims
- ‚úÖ Confidence scoring included