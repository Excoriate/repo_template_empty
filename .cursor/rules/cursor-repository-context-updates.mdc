---
description: "Execute repomix automatically when new technologies are detected in the repository"
globs: ["package.json", "go.mod", "Cargo.toml", "requirements.txt", "Dockerfile"]
alwaysApply: true
---

# Auto-Repomix on Technology Changes

## Description

Execute `repomix` command automatically when new technologies, dependencies, or significant configuration changes are detected to maintain current repository analysis for AI tools.

## Rule

Execute `repomix` when these technology files change:

1. **Package Dependencies**: On modification of `package.json`, `requirements.txt`, `go.mod`, `Cargo.toml`
2. **Build Configurations**: On creation/modification of `Dockerfile`, `docker-compose.yml`
3. **New Languages**: On first occurrence of new file extensions (`.ts`, `.go`, `.rs`, `.py`)
4. **Major Config Changes**: On modification of build tool configs (`webpack.config.js`, `vite.config.js`)

### Execution Command

```bash
repomix  # Uses existing repomix.config.json configuration
```

## Implementation

**Cursor IDE Integration:**
- Monitors technology files for changes
- Triggers repomix execution automatically
- Prevents outdated repository analysis

**Technical Enforcement:**
- File watcher on specified glob patterns
- Automatic command execution on change detection
- Uses existing `repomix.config.json` settings

## Benefits

1. **Current Analysis**: Keeps repository context up-to-date for AI tools
2. **Automatic Execution**: No manual repomix command required
3. **Technology-Aware**: Triggers only on meaningful changes
4. **Efficient**: Uses optimized repomix configuration

## Examples

### ✅ Correct Trigger Events

**Adding TypeScript:**
```bash
# Changes detected:
package.json (+ typescript dependency)
tsconfig.json (new file)

# Automatic action:
repomix  # Regenerates analysis with TypeScript files
```

**Adding Docker:**
```bash
# Changes detected:
Dockerfile (new file)

# Automatic action:
repomix  # Updates analysis to include Docker configuration
```

### ❌ Incorrect Manual Usage

```bash
# ❌ Manual repomix execution without trigger
repomix  # Run unnecessarily on documentation changes

# ❌ Ignoring the automation
# Making technology changes but manually skipping repomix execution
```

### Trigger Pattern Examples

```
Technology File Changes → Auto Repomix
├── package.json modified → repomix
├── go.mod created → repomix
├── requirements.txt updated → repomix
├── Dockerfile added → repomix
└── Documentation changes → no trigger
```
